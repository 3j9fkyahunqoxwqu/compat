<pre class="metadata">
Title: Compatibility Standard
Group: WHATWG
H1: Compatibility
Shortname: compat
Repository: whatwg/compat
Status: LS
No Editor: true
Abstract: This standard describes a collection of non-standard (and often vendor-prefixed) CSS properties and DOM APIs that web browsers need to support for compatibility with the de facto web.
Logo: https://resources.whatwg.org/logo-compat.svg
!Participate: <a href=https://github.com/whatwg/compat>GitHub whatwg/compat</a> (<a href=https://github.com/whatwg/compat/issues/new>new issue</a>, <a href=https://github.com/whatwg/compat/issues>open issues</a>)
!Participate: <a href=https://wiki.whatwg.org/wiki/IRC>IRC: #whatwg on Freenode</a>
!Commits: <a href="https://github.com/whatwg/compat/commits">GitHub whatwg/compat/commits</a>
!Commits: <a href="https://twitter.com/compatstandard">@compatstandard</a>
Indent: 2
Boilerplate: omit conformance
</pre>

<script src=https://resources.whatwg.org/file-issue.js async></script>

<pre class="anchors">
urlPrefix: https://drafts.fxtf.org/geometry/; spec: geometry-1
  type: interface;
    text: DOMMatrix; url: #dommatrix
    text: DOMMatrixReadOnly; url: #dommatrixreadonly
  type: attribute;
    text: m11 element; url: #m11-element
    text: m12 element; url: #m12-element
    text: m13 element; url: #m13-element
    text: m14 element; url: #m14-element
    text: m21 element; url: #m21-element
    text: m22 element; url: #m22-element
    text: m23 element; url: #m23-element
    text: m24 element; url: #m24-element
    text: m31 element; url: #m31-element
    text: m32 element; url: #m32-element
    text: m33 element; url: #m33-element
    text: m34 element; url: #m34-element
    text: m41 element; url: #m41-element
    text: m42 element; url: #m42-element
    text: m43 element; url: #m43-element
    text: m44 element; url: #m44-element
    text: m11 attribute; url: #dom-dommatrixreadonly-m11
    text: m12 attribute; url: #dom-dommatrixreadonly-m12
    text: m13 attribute; url: #dom-dommatrixreadonly-m13
    text: m14 attribute; url: #dom-dommatrixreadonly-m14
    text: m21 attribute; url: #dom-dommatrixreadonly-m21
    text: m22 attribute; url: #dom-dommatrixreadonly-m22
    text: m23 attribute; url: #dom-dommatrixreadonly-m23
    text: m24 attribute; url: #dom-dommatrixreadonly-m24
    text: m31 attribute; url: #dom-dommatrixreadonly-m31
    text: m32 attribute; url: #dom-dommatrixreadonly-m32
    text: m33 attribute; url: #dom-dommatrixreadonly-m33
    text: m34 attribute; url: #dom-dommatrixreadonly-m34
    text: m41 attribute; url: #dom-dommatrixreadonly-m41
    text: m42 attribute; url: #dom-dommatrixreadonly-m42
    text: m43 attribute; url: #dom-dommatrixreadonly-m43
    text: m44 attribute; url: #dom-dommatrixreadonly-m44
    text: a attribute; url: #dom-dommatrixreadonly-a
    text: b attribute; url: #dom-dommatrixreadonly-b
    text: c attribute; url: #dom-dommatrixreadonly-c
    text: d attribute; url: #dom-dommatrixreadonly-d
    text: e attribute; url: #dom-dommatrixreadonly-e
    text: f attribute; url: #dom-dommatrixreadonly-f
  type: method;
    text: fromString; url: #dom-dommatrixreadonly-fromstring0
urlPrefix: https://heycam.github.io/webidl/
  type: dfn; urlPrefix: #dfn-
    text: throw
  type: exception
    text: SyntaxError
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: HTML
  type: interface
    urlPrefix: browsers.html
      text: Window; url: #window
  type: element
    urlPrefix: semantics.html
      text: body; url: #the-body-element
  type: dfn
    urlPrefix: webappapis.html
      text: event handler; url: #event-handlers
      text: event handler event type; url: #event-handler-event-type
    urlPrefix: browsers.html
      text: active document; url: #active-document
    urlPrefix: infrastructure.html; url: #concept-event-fire
      text: fire
urlPrefix: https://dom.spec.whatwg.org/; spec: WHATWG-DOM
  type: interface
    text: Document; url: #document
  type: interface
    text: Event; url: #event
  type: method
    text: createEvent; url: #dom-document-createevent
</pre>

<!-- Commented out until we know what the heck to put here:
<h2 id='goals'>Goals</h2> -->

<h2 id='introduction'>Introduction</h2>
<em>This section is non-normative.</em>

There exists an increasingly large corpus of web content that depends on web browsers supporting a number of <code>webkit</code>-prefixed CSS properties and DOM APIs for functionality or layout. This holds especially true for mobile-optimized web content.

This specification aims to describe the minimal set of <code>webkit</code>-prefixed CSS properties and DOM APIs that user agents are required to support for web compatibility.

<div class="XXX">
The <a href="https://wiki.mozilla.org/Compatibility/Mobile/Non_Standard_Compatibility">Non-Standard Compatibility</a> wiki page will serve as a rough guide for what this specification intends to cover.
</div>

<h2 id='conformance'>Conformance</h2>
All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked non-normative.
Everything else in this specification is normative.

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in RFC 2119.
For readability, these words do not appear in all uppercase letters in this
specification. [[!RFC2119]]

Requirements phrased in the imperative as part of algorithms
(such as "strip any leading space characters" or "return false and
terminate these steps") are to be interpreted with the meaning of the
keyword ("must", "should", "may", etc.) used in introducing the
algorithm.

Conformance requirements phrased as algorithms or specific steps
may be implemented in any manner, so long as the end result is
equivalent. (In particular, the algorithms defined in this
specification are intended to be easy to follow, and not intended to
be performant.)

<h2 id="dom-interfaces">DOM Interfaces</h2>

<h3 id="webkitcssmatrix-interface">The {{WebKitCSSMatrix}} interface</h3>

<!-- cf. https://github.com/WebKit/webkit/blob/master/Source/WebCore/css/WebKitCSSMatrix.idl -->
<pre class="idl">
[Constructor,
 Constructor(DOMString transformList),
 Constructor(WebKitCSSMatrix other)
 Exposed=Window]
interface WebKitCSSMatrix : DOMMatrix {
    // Mutable transform methods
    WebKitCSSMatrix setMatrixValue(DOMString transformList);

    // Immutable transform methods
    WebKitCSSMatrix multiply(WebKitCSSMatrix other);
    WebKitCSSMatrix inverse();
    WebKitCSSMatrix translate(unrestricted double tx,
                              unrestricted double ty,
                              unrestricted double tz);
    WebKitCSSMatrix scale(optional unrestricted double scaleX,
                          optional unrestricted double scaleY,
                          optional unrestricted double scaleZ);
    WebKitCSSMatrix rotate(optional unrestricted double rotX,
                           optional unrestricted double rotY,
                           optional unrestricted double rotZ);
    WebKitCSSMatrix rotateAxisAngle(unrestricted double x,
                                    unrestricted double y,
                                    unrestricted double z,
                                    unrestricted double angle);
    WebKitCSSMatrix skewX(unrestricted double sx);
    WebKitCSSMatrix skewY(unrestricted double sy);
};
</pre>

The {{WebKitCSSMatrix}} interface represents a 4Ã—4 homogeneous matrix with methods useful for 2D and 3D transform operations.

The {{WebKitCSSMatrix}} interface may be implemented as a subclass of the {{DOMMatrix}} and {{DOMMatrixReadOnly}} interfaces, defined in Geometry Interfaces Module Level 1 [[!geometry-1]], with key differences noted below.

<h4 id="webkitcssmatrix-constructors">Constructors</h4>

<dl class=domintro>
  <dt>
    <code><var>matrix</var> = new <a constructor
    lt="WebKitCSSMatrix()">WebKitCSSMatrix()</a></code>
  </dt>
  <dd>
    Returns a new {{WebKitCSSMatrix}} object.
  </dd>
</dl>

The
<dfn constructor dfn-for="WebKitCSSMatrix" lt="WebKitCSSMatrix()">WebKitCSSMatrix()</dfn>
constructor, when invoked, must run these steps:

<ol>
  <li>
    Let <var>m</var> be a new {{WebKitCSSMatrix}} object.
  </li>
  <li>For m, set the
    <a attribute spec="geometry-1">m11 element</a>,
    <a attribute spec="geometry-1">m22 element</a>,
    <a attribute spec="geometry-1">m33 element</a>,
    <a attribute spec="geometry-1">m44 element</a> to 1. Set the
    <a attribute spec="geometry-1">m12 element</a>,
    <a attribute spec="geometry-1">m13 element</a>,
    <a attribute spec="geometry-1">m14 element</a>,
    <a attribute spec="geometry-1">m21 element</a>,
    <a attribute spec="geometry-1">m23 element</a>,
    <a attribute spec="geometry-1">m24 element</a>,
    <a attribute spec="geometry-1">m31 element</a>,
    <a attribute spec="geometry-1">m32 element</a>,
    <a attribute spec="geometry-1">m34 element</a>,
    <a attribute spec="geometry-1">m41 element</a>,
    <a attribute spec="geometry-1">m42 element</a>,
    <a attribute spec="geometry-1">m43 element</a> to 0.</li>
  <li>
    Return <var>m</var>.
  </li>
</ol>

<dl class=domintro>
  <dt>
    <code><var>matrix</var> = new <a constructor
    lt="WebKitCSSMatrix(transformList)">WebKitCSSMatrix</a>(transformList)</code>
  </dt>
  <dd>
    Returns a new {{WebKitCSSMatrix}} object.
  </dd>
</dl>

The
<dfn constructor dfn-for="WebKitCSSMatrix" lt="WebKitCSSMatrix(transformList)">WebKitCSSMatrix(transformList)</dfn>
constructor, when invoked, must run these steps:

<ol>
  <li>
    Let <var>m</var> be a new {{WebKitCSSMatrix}} object.
  </li>
  <li>Return the result of the algorithm for the static {{DOMMatrixReadOnly}} <a method for=DOMMatrixReadOnly spec="geometry-1">fromString(transformList)</a> method, as <var>m</var>.
  </li>
</ol>

<dl class=domintro>
  <dt>
    <code><var>matrix</var> = new <a constructor
    lt="WebKitCSSMatrix(other)">WebKitCSSMatrix</a>(other)</code>
  </dt>
  <dd>
    Returns a new {{WebKitCSSMatrix}} object.
  </dd>
</dl>

The
<dfn constructor for="WebKitCSSMatrix" lt="WebKitCSSMatrix(other)">WebKitCSSMatrix(other)</dfn>
constructor, when invoked, must run these steps:

<ol>
  <li>
    Let <var>m</var> be a new {{WebKitCSSMatrix}} object.
  </li>
  <li>For m, set the 16 elements
    <a attribute spec="geometry-1">m11 element</a> â€¦
    <a attribute spec="geometry-1">m44 element</a> to the value of the 16 elements
    <a attribute spec="geometry-1">m11 element</a> â€¦
    <a attribute spec="geometry-1">m44 element</a> of <var>other</var>.
  <li>Return <var>m</var>.</li>
</ol>

<h4 id="webkitcssmatrix-attributes">{{WebKitCSSMatrix}} attributes</h4>

{{WebKitCSSMatrix}} objects must inherit the following attributes from {{DOMMatrixReadOnly}}:

<a attribute spec="geometry-1">m11 attribute</a>,
<a attribute spec="geometry-1">m22 attribute</a>,
<a attribute spec="geometry-1">m33 attribute</a>,
<a attribute spec="geometry-1">m44 attribute</a>,
<a attribute spec="geometry-1">m12 attribute</a>,
<a attribute spec="geometry-1">m13 attribute</a>,
<a attribute spec="geometry-1">m14 attribute</a>,
<a attribute spec="geometry-1">m21 attribute</a>,
<a attribute spec="geometry-1">m23 attribute</a>,
<a attribute spec="geometry-1">m24 attribute</a>,
<a attribute spec="geometry-1">m31 attribute</a>,
<a attribute spec="geometry-1">m32 attribute</a>,
<a attribute spec="geometry-1">m34 attribute</a>,
<a attribute spec="geometry-1">m41 attribute</a>,
<a attribute spec="geometry-1">m42 attribute</a>,
<a attribute spec="geometry-1">m43 attribute</a>,
<a attribute spec="geometry-1">a attribute</a>,
<a attribute spec="geometry-1">b attribute</a>,
<a attribute spec="geometry-1">c attribute</a>,
<a attribute spec="geometry-1">d attribute</a>,
<a attribute spec="geometry-1">e attribute</a>,
<a attribute spec="geometry-1">f attribute</a>.

<h4 id="webkitcssmatrix-mutable-methods">{{WebKitCSSMatrix}} mutable methods</h4>

The following method modifies the current matrix, returning the matrix it was invoked on.

When the <dfn method for="WebKitCSSMatrix"><code>setMatrixValue(transformList)</code></dfn>
method is invoked, the user agent must run the following steps:

1. Return the result of the algorithm for the {{DOMMatrix}} <a method for="DOMMatrix" spec="geometry-1">setMatrixValue(transformList)</a> method.

<h4 id="webkitcssmatrix-immutable-methods">{{WebKitCSSMatrix}} immutable methods</h4>

The following methods do not modify the current matrix and return a new {{WebKitCSSMatrix}} object.

When the <dfn method for="WebKitCSSMatrix"><code>multiply(other)</code></dfn>
method is invoked, the user agent must run the following steps:

1. Return the result of the algorithm for the {{DOMMatrixReadOnly}} <a method for="DOMMatrixReadOnly" spec="geometry-1">multiply(other)</a> method as a new {{WebKitCSSMatrix}} object.

When the <dfn method for="WebKitCSSMatrix"><code>inverse()</code></dfn>
method is invoked, the user agent must run the following steps:

1. Return the result of the algorithm for the {{DOMMatrixReadOnly}} <a method for="DOMMatrixReadOnly" spec="geometry-1">inverse()</a> method as a new {{WebKitCSSMatrix}} object.

When the <dfn method for="WebKitCSSMatrix"><code>translate(tx, ty, tz)</code></dfn>
method is invoked, the user agent must run the following steps:

1. Return the result of the algorithm for the {{DOMMatrixReadOnly}} <a method for="DOMMatrixReadOnly" spec="geometry-1">translate(x, y, z)</a> method as a new {{WebKitCSSMatrix}} object.

When the <dfn method for="WebKitCSSMatrix"><code>scale(scaleX, scaleY, scaleZ)</code></dfn>
method is invoked, the user agent must run the following steps:

1. If <var>scaleX</var> or <var>scaleZ</var> are undefined, let <var>scaleX</var> or <var>scaleZ</var> be 1, respectively.

2. If <var>scaleY</var> is undefined, let <var>scaleY</var> be the value of <var>scaleX</var>.

3. Return the result of the algorithm for the {{DOMMatrixReadOnly}} <a method for="DOMMatrixReadOnly" spec="geometry-1">scaleNonUniform(scaleX, scaleY, scaleZ)</a> method as a new {{WebKitCSSMatrix}} object.

When the <dfn method for="WebKitCSSMatrix"><code>rotate(rotX, rotY, rotZ)</code></dfn>
method is invoked, the user agent must run the following steps:

1. Let <var>result</var> be the resulting matrix initialized to the values of the current matrix.

2. If <var>rotY</var> and <var>rotZ</var> are undefined, let <var>rotZ</var> be the value of <var>rotX</var> and let <var>rotX</var> and <var>rotY</var> be 0.

3. Else, if any of <var>rotX</var>, <var>rotY</var> or <var>rotZ</var> are undefined, let the undefined argument be 0.

4. Post multiply <var>result</var> by each of its 3 rotation matrices about the major axes, first X using <var>rotX</var>, then Y using <var>rotY</var>, then Z using <var>rotZ</var>.

5. Return the result as a new {{WebKitCSSMatrix}} object.

The current matrix is not modified.

When the <dfn method for="WebKitCSSMatrix"><code>rotateAxisAngle(x, y, z, angle)</code></dfn>
method is invoked, the user agent must run the following steps:

1. Return the result of the algorithm for the {{DOMMatrixReadOnly}} <a method for="DOMMatrixReadOnly" spec="geometry-1">rotateAxisAngle(x, y, z, angle)</a> method as a new {{WebKitCSSMatrix}} object.

When the <dfn method for="WebKitCSSMatrix"><code>skewX(sx)</code></dfn>
method is invoked, the user agent must run the following steps:

1. Return the result of the algorithm for the {{DOMMatrixReadOnly}} <a method for="DOMMatrixReadOnly" spec="geometry-1">skewX(sx)</a> method as a new {{WebKitCSSMatrix}} object.

<!--

open question: is https://github.com/WebKit/webkit/blob/d055853e59dd6cc4cfd835b143e79258bb13c552/Source/WebCore/css/WebKitCSSMatrix.h#L138 needed for compat?

-->

When the <dfn method for="WebKitCSSMatrix"><code>skewY(sy)</code></dfn>
method is invoked, the user agent must run the following steps:

1. Return the result of {{DOMMatrixReadOnly}} <a method for="DOMMatrixReadOnly" spec="geometry-1">skewY(sy)</a> as a new {{WebKitCSSMatrix}} object.

<!--

open question: is https://github.com/WebKit/webkit/blob/d055853e59dd6cc4cfd835b143e79258bb13c552/Source/WebCore/css/WebKitCSSMatrix.h#L144 needed for compat?

-->

<!-- TODO: add note about common usage that requires support for webkitTransform, etc.

      var box = document.getElementById('box');
      var tranString = window.getComputedStyle(box).webkitTransform;
      var m = new WebKitCSSMatrix(tranString);
      box.style.webkitTransform = m.rotateAxisAngle(3,1,2,1);
-->

<h3 id="windoworientation-interface">The {{WindowOrientation}} interface</h3>

<pre class="idl">
[NoInterfaceObject,
 Exposed=Window]
interface WindowOrientation {
    readonly attribute short orientation;
};
</pre>

<div class="XXX">
TODO: https://github.com/whatwg/compat/issues/7
</div>

<h2 id="events">Events</h2>

<h3 id="events-orientationchange-event">The {{OrientationChangeEvent}} interface</h2>

<pre class="idl">
interface OrientationChangeEvent : Event {
};
</pre>

An {{OrientationChangeEvent}} must be able to be created by calling the <code><a method>createEvent</a></code> method of the {{Document}} interface, with the {{Event}} interface as its constructor.

<dl class=domintro>
  <dt>
    <pre><code>
    <var>event</var> = document.createEvent("OrientationEvent");
    event.initEvent("orientationchange", false, false);
    window.dispatchEvent(event);
    </code></pre>
  </dt>
  <dd>
    <a dfn lt="fire">Fires</a> a new {{OrientationChangeEvent}} object on the <a dfn lt="active document">active document's</a> {{Window}} object.
  </dd>
</dl>

<h2 id="event-handlers">Event Handlers</h2>

The following are the event handlers and their corresponding event handler event types that must be supported on the {{Window}} object as attributes.

<!-- TODO: these shouldn't really be defined here, was just getting things in place. -->

<table>
  <thead>
    <tr>
     <th><a dfn>event handler</a></th>
     <th><a dfn>event handler event type</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <dfn id="handler-window-onfullscreenchange" lt="onorientationchange">
          <code>onorientationchange</code>
        </dfn>
      </td>
      <td>
        <code><dfn id="event-window-orientationchange" lt="orientationchange">orientationchange</dfn></code>
      </td>
    </tr>
  </tbody>
</table>


The following are the event handlers and their corresponding event handler event types that must be supported on the <a element>body</a> element as attributes.

<table>
  <thead>
    <tr>
     <th><a dfn>event handler</a></th>
     <th><a dfn>event handler event type</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <a dfn id="handler-document-onfullscreenchange" lt="onorientationchange">
          <code>onorientationchange</code>
        </a>
      </td>
      <td>
        <code><a dfn id="event-document-orientationchange" lt="orientationchange">orientationchange</a></code>
      </td>
    </tr>
  </tbody>
</table>

<div class="XXX">
WebKit (allegedly?) has this on <a href="https://github.com/WebKit/webkit/blob/e455672f9e6861ced85d8be01cb7bc03a30a0555/LayoutTests/fast/dom/event-handler-attributes.html#L335">HTMLFrameSetElement</a>. Needed for compat?
</div>

<h2 id="acknowledgements" class="no-num">Acknowledgements</h2>
Thanks to Jacob Rossi and {{your name here}} for feedback and contributions to this standard.

Thanks to Simon Pieters, Dirk Schulze and Rik Cabanier for defining the {{DOMMatrix}} and {{DOMMatrixReadOnly}} interfaces. [[!geometry-1]]

This standard is written by
<a href="https://miketaylr.com/">Mike Taylor</a>
(<a href="https://www.mozilla.org/">Mozilla</a>,
<a href=mailto:miket@mozilla.com>miket@mozilla.com</a>).

Per <a rel="license" href="//creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to
the extent possible under law, the editors have waived all copyright and related or
neighboring rights to this work.

<script id="head" src="https://resources.whatwg.org/dfn.js"></script>
